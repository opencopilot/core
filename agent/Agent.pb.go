// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Agent.proto

/*
Package opencopilot is a generated protocol buffer package.

It is generated from these files:
	Agent.proto

It has these top-level messages:
	AgentStatusRequest
	StopServiceRequest
	SetServiceGRPCRequest
	GetServiceLogsRequest
	ServiceLogLine
	AgentStatus
*/
package opencopilot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AgentStatusRequest struct {
}

func (m *AgentStatusRequest) Reset()                    { *m = AgentStatusRequest{} }
func (m *AgentStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*AgentStatusRequest) ProtoMessage()               {}
func (*AgentStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StopServiceRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *StopServiceRequest) Reset()                    { *m = StopServiceRequest{} }
func (m *StopServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*StopServiceRequest) ProtoMessage()               {}
func (*StopServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StopServiceRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type SetServiceGRPCRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Port        int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *SetServiceGRPCRequest) Reset()                    { *m = SetServiceGRPCRequest{} }
func (m *SetServiceGRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*SetServiceGRPCRequest) ProtoMessage()               {}
func (*SetServiceGRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SetServiceGRPCRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *SetServiceGRPCRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type GetServiceLogsRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *GetServiceLogsRequest) Reset()                    { *m = GetServiceLogsRequest{} }
func (m *GetServiceLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceLogsRequest) ProtoMessage()               {}
func (*GetServiceLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetServiceLogsRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type ServiceLogLine struct {
	Line string `protobuf:"bytes,1,opt,name=line" json:"line,omitempty"`
}

func (m *ServiceLogLine) Reset()                    { *m = ServiceLogLine{} }
func (m *ServiceLogLine) String() string            { return proto.CompactTextString(m) }
func (*ServiceLogLine) ProtoMessage()               {}
func (*ServiceLogLine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServiceLogLine) GetLine() string {
	if m != nil {
		return m.Line
	}
	return ""
}

type AgentStatus struct {
	AgentId  string                      `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Services []*AgentStatus_AgentService `protobuf:"bytes,2,rep,name=services" json:"services,omitempty"`
}

func (m *AgentStatus) Reset()                    { *m = AgentStatus{} }
func (m *AgentStatus) String() string            { return proto.CompactTextString(m) }
func (*AgentStatus) ProtoMessage()               {}
func (*AgentStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AgentStatus) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *AgentStatus) GetServices() []*AgentStatus_AgentService {
	if m != nil {
		return m.Services
	}
	return nil
}

type AgentStatus_AgentService struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *AgentStatus_AgentService) Reset()                    { *m = AgentStatus_AgentService{} }
func (m *AgentStatus_AgentService) String() string            { return proto.CompactTextString(m) }
func (*AgentStatus_AgentService) ProtoMessage()               {}
func (*AgentStatus_AgentService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *AgentStatus_AgentService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgentStatus_AgentService) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func init() {
	proto.RegisterType((*AgentStatusRequest)(nil), "opencopilot.AgentStatusRequest")
	proto.RegisterType((*StopServiceRequest)(nil), "opencopilot.StopServiceRequest")
	proto.RegisterType((*SetServiceGRPCRequest)(nil), "opencopilot.SetServiceGRPCRequest")
	proto.RegisterType((*GetServiceLogsRequest)(nil), "opencopilot.GetServiceLogsRequest")
	proto.RegisterType((*ServiceLogLine)(nil), "opencopilot.ServiceLogLine")
	proto.RegisterType((*AgentStatus)(nil), "opencopilot.AgentStatus")
	proto.RegisterType((*AgentStatus_AgentService)(nil), "opencopilot.AgentStatus.AgentService")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
	GetStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatus, error)
	GetServiceLogs(ctx context.Context, in *GetServiceLogsRequest, opts ...grpc.CallOption) (Agent_GetServiceLogsClient, error)
	SetServiceGRPC(ctx context.Context, in *SetServiceGRPCRequest, opts ...grpc.CallOption) (*AgentStatus, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetStatus(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatus, error) {
	out := new(AgentStatus)
	err := grpc.Invoke(ctx, "/opencopilot.Agent/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetServiceLogs(ctx context.Context, in *GetServiceLogsRequest, opts ...grpc.CallOption) (Agent_GetServiceLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Agent_serviceDesc.Streams[0], c.cc, "/opencopilot.Agent/GetServiceLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetServiceLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetServiceLogsClient interface {
	Recv() (*ServiceLogLine, error)
	grpc.ClientStream
}

type agentGetServiceLogsClient struct {
	grpc.ClientStream
}

func (x *agentGetServiceLogsClient) Recv() (*ServiceLogLine, error) {
	m := new(ServiceLogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) SetServiceGRPC(ctx context.Context, in *SetServiceGRPCRequest, opts ...grpc.CallOption) (*AgentStatus, error) {
	out := new(AgentStatus)
	err := grpc.Invoke(ctx, "/opencopilot.Agent/SetServiceGRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	GetStatus(context.Context, *AgentStatusRequest) (*AgentStatus, error)
	GetServiceLogs(*GetServiceLogsRequest, Agent_GetServiceLogsServer) error
	SetServiceGRPC(context.Context, *SetServiceGRPCRequest) (*AgentStatus, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.Agent/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetStatus(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetServiceLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServiceLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetServiceLogs(m, &agentGetServiceLogsServer{stream})
}

type Agent_GetServiceLogsServer interface {
	Send(*ServiceLogLine) error
	grpc.ServerStream
}

type agentGetServiceLogsServer struct {
	grpc.ServerStream
}

func (x *agentGetServiceLogsServer) Send(m *ServiceLogLine) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_SetServiceGRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceGRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetServiceGRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opencopilot.Agent/SetServiceGRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetServiceGRPC(ctx, req.(*SetServiceGRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opencopilot.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Agent_GetStatus_Handler,
		},
		{
			MethodName: "SetServiceGRPC",
			Handler:    _Agent_SetServiceGRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServiceLogs",
			Handler:       _Agent_GetServiceLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Agent.proto",
}

func init() { proto.RegisterFile("Agent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xbb, 0xf9, 0xff, 0xab, 0xed, 0xa4, 0xf4, 0x30, 0xb4, 0x10, 0xe3, 0xc1, 0xb8, 0x28,
	0xe4, 0x14, 0xa4, 0x0a, 0x82, 0xb7, 0xe2, 0xa1, 0x16, 0x8a, 0x94, 0x04, 0xcf, 0x12, 0x93, 0x25,
	0x2c, 0xd4, 0xdd, 0x98, 0x6c, 0xfd, 0x3e, 0x7e, 0x4d, 0x4f, 0x92, 0xcd, 0x92, 0x26, 0xd2, 0x8a,
	0xde, 0x66, 0x76, 0xdf, 0x7b, 0x33, 0xfc, 0x18, 0xb0, 0xe7, 0x19, 0x13, 0x2a, 0xc8, 0x0b, 0xa9,
	0x24, 0xda, 0x32, 0x67, 0x22, 0x91, 0x39, 0xdf, 0x48, 0x45, 0x27, 0x80, 0xfa, 0x2f, 0x52, 0xb1,
	0xda, 0x96, 0x21, 0x7b, 0xdb, 0xb2, 0x52, 0xd1, 0x5b, 0xc0, 0x48, 0xc9, 0x3c, 0x62, 0xc5, 0x3b,
	0x4f, 0x98, 0x79, 0xc5, 0x73, 0x18, 0x25, 0x52, 0xa8, 0x98, 0x0b, 0x56, 0x3c, 0xf3, 0xd4, 0x21,
	0x1e, 0xf1, 0x87, 0xa1, 0xdd, 0xbc, 0x2d, 0x53, 0xfa, 0x08, 0xd3, 0x88, 0x29, 0xe3, 0x5b, 0x84,
	0xeb, 0xfb, 0xdf, 0x7b, 0x11, 0xe1, 0x7f, 0x2e, 0x0b, 0xe5, 0x58, 0x1e, 0xf1, 0xfb, 0xa1, 0xae,
	0xe9, 0x1d, 0x4c, 0x17, 0x4d, 0xde, 0x4a, 0x66, 0xe5, 0x1f, 0x76, 0xb9, 0x80, 0xf1, 0xce, 0xb8,
	0xe2, 0x82, 0x55, 0x13, 0x36, 0x5c, 0x30, 0x23, 0xd6, 0x35, 0xfd, 0x20, 0x86, 0x4e, 0x4d, 0x00,
	0x4f, 0x60, 0x10, 0x57, 0xed, 0x2e, 0xf4, 0x58, 0xf7, 0xcb, 0x14, 0xe7, 0x30, 0x28, 0xeb, 0xc0,
	0xd2, 0xb1, 0xbc, 0x7f, 0xbe, 0x3d, 0xbb, 0x0c, 0x5a, 0x2c, 0x83, 0x56, 0x8c, 0xa9, 0x0d, 0xbf,
	0xc6, 0xe6, 0xde, 0xc0, 0xa8, 0xfd, 0x83, 0x63, 0xb0, 0x9a, 0x39, 0x16, 0x4f, 0x71, 0x02, 0x7d,
	0xfe, 0x1a, 0x67, 0x4c, 0x43, 0x18, 0x86, 0x75, 0x33, 0xfb, 0x24, 0xd0, 0xd7, 0x36, 0x7c, 0x80,
	0x61, 0xc5, 0xa3, 0x5e, 0xf5, 0xec, 0xd0, 0x74, 0x03, 0xc9, 0x75, 0x0e, 0x09, 0x68, 0x0f, 0x9f,
	0x60, 0xdc, 0x25, 0x8b, 0xb4, 0xa3, 0xde, 0x8b, 0xdd, 0x3d, 0xed, 0x68, 0xba, 0x78, 0x69, 0xef,
	0x8a, 0xe0, 0xba, 0x82, 0xde, 0x3e, 0x80, 0x6f, 0xb1, 0x7b, 0xaf, 0xe3, 0xa7, 0x45, 0x5f, 0x8e,
	0xf4, 0xd5, 0x5e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x50, 0x21, 0x34, 0xc4, 0x02, 0x00,
	0x00,
}
